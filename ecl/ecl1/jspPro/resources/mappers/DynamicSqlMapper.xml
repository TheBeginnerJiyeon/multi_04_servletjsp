<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.multi.section01.xml.DynamicSqlMapper">
	
	<resultMap type="com.multi.common.MenuDTO" id = "menuResultMap">
		<id property="code" column="MENU_CODE"/>
		<result property="name" column="MENU_NAME"/>
		<result property="price" column="MENU_PRICE"/>
		<result property="categoryCode" column="CATEGORY_CODE"/>
		<result property="orderableStatus" column="ORDERABLE_STATUS"/>
		
	</resultMap>
	<select id = "selectMenuByPrice" parameterType="hashmap" resultMap="menuResultMap">
	<!-- 
		<= : lte
        >= : gte
        > : gt
        < : lt
        == : eq
        != : neq-->
		SELECT
		    A.MENU_CODE,
		    A.MENU_NAME,
		    A.MENU_PRICE,
		    A.CATEGORY_CODE,
		    A.ORDERABLE_STATUS
		FROM TBL_MENU A
		WHERE A.ORDERABLE_STATUS ='Y'
		
		<if test="price gte 0 and price lte 10000">
			<![CDATA[
			AND A.MENU_PRICE <= #{price}
			]]>
		</if>
		<if test="price gt 10000 and price lte 20000">  
          AND A.MENU_PRICE BETWEEN 10000 AND #{ price }
        </if>
        <if test="price gt 20000 and price lte 30000">
          AND A.MENU_PRICE BETWEEN 20000 AND #{ price } 
        </if>
        <if test="price gt 30000">
          AND A.MENU_PRICE BETWEEN 30000 AND #{ price } 
        </if>
        ORDER BY A.MENU_CODE
		
	
	</select>


	<select id = "searchMenu" parameterType="SearchCriteria" resultMap="menuResultMap">
		SELECT
		    A.MENU_CODE,
		    A.MENU_NAME,
		    A.MENU_PRICE,
		    A.CATEGORY_CODE,
		    A.ORDERABLE_STATUS
		FROM TBL_MENU A
		
		<if test = "condition == 'category'">
		JOIN TBL_CATEGORY B ON  A.CATEGORY_CODE = B.CATEGORY_CODE
		</if>
		WHERE A.ORDERABLE_STATUS ='Y'
		
		<if test ="condition == 'name'">
			AND A.MENU_NAME LIKE '%' || #{value} || '%'
		</if>
		
		<if test ="condition == 'category'">
			AND B.CATEGORY_NAME  =  #{value}
		</if>
	
		 ORDER BY A.MENU_CODE
	</select>




	<select id = "searchMenuBySupCategory" parameterType="SearchCriteria" resultMap="menuResultMap">
		SELECT
		    A.MENU_CODE,
		    A.MENU_NAME,
		    A.MENU_PRICE,
		    A.CATEGORY_CODE,
		    A.ORDERABLE_STATUS
		FROM TBL_MENU A
		WHERE A.ORDERABLE_STATUS ='Y'
		<choose>
		<when test ="value =='식사'">
			AND A.CATEGORY_CODE IN (4, 5, 6, 7)
		</when>
		<when test ="value =='음료'">
			AND A.CATEGORY_CODE IN (8, 9, 10)
		</when>
		<otherwise>
			AND A.CATEGORY_CODE IN (11, 12)
		</otherwise>
		</choose>

 		ORDER BY A.MENU_CODE
	
	</select>
	
	
	<select id = "searchMenuByRandomMenuCode" parameterType="hashmap" resultMap="menuResultMap">
	
		SELECT
		    A.MENU_CODE,
		    A.MENU_NAME,
		    A.MENU_PRICE,
		    A.CATEGORY_CODE,
		    A.ORDERABLE_STATUS
		FROM TBL_MENU A
		WHERE A.ORDERABLE_STATUS ='Y'
		AND A.MENU_CODE IN 
		
		 <!-- 
    		정적 필드 혹은 정적 메소드에 직접 접근하여 사용할 수 있다.
    		정적 필드 접근 : @풀클래스명@필드명
    		정적 메소드 접근 : @풀클래스명@메소드명()
    	 -->
    	<!--	<foreach collection ="@com.uni.section01.xml.Application@createRandomMenuCodeList()" item ="menuCode" open = "(" separator =", " close=")" >-->
    	
		<foreach collection ="randomMenuCodeList" item ="menuCode" open = "(" separator =", " close=")" >
		
			#{menuCode}
	
		</foreach>
	</select>
	<select id = "searchMenuByCodeOrSearchAll" parameterType="SearchCriteria" resultMap="menuResultMap">
		SELECT
		    A.MENU_CODE,
		    A.MENU_NAME,
		    A.MENU_PRICE,
		    A.CATEGORY_CODE,
		    A.ORDERABLE_STATUS
		FROM TBL_MENU A
		<if test = "condition != null and condition eq 'menuCode'">
			<where> 
				A.MENU_CODE = #{value}
			</where>
		</if>

	</select>
	
	<select id = "searchMenuByNameOrCategory" parameterType="hashmap" resultMap="menuResultMap">
		SELECT
		    A.MENU_CODE,
		    A.MENU_NAME,
		    A.MENU_PRICE,
		    A.CATEGORY_CODE,
		    A.ORDERABLE_STATUS
		FROM TBL_MENU A
	
	 <!-- <if test="nameValue != null">
         WHERE A.MENU_NAME LIKE '%' || #{ nameValue } || '%'
        </if>
        <if test="categoryValue != null">
           AND A.CATEGORY_CODE = #{ categoryValue }
        </if>
     -->
      <!-- 해결방법 1. <where> 태그를 이용한다. -->
      <!-- 
	        where 태그는 앞에 where로 시작하지 않으면 자동으로 where를 붙여준다.
		        또한 where 절 내부에 모두 쿼리문이 추가되지 않는 상황인 경우 where를 무시한다.
		        단 name 부분에 where를 빼주어야 한다. 빼주지 않으면 where where 두 개가 생기게 된다.
	        AND나 OR로 시작을 하게 되면 자동으로 해당 단어를 지워준다. 
	   -->     
      <!-- 
      	<where>
        	<if test="nameValue != null">
                A.MENU_NAME LIKE '%' || #{ nameValue } || '%'
	        </if>
	        <if test="categoryValue != null">
           		AND A.CATEGORY_CODE = #{ categoryValue }
        	</if>
        </where>
       
       -->
        <!-- 해결방법 2. <trim> 태그를 이용한다. -->
        <!-- 
	                조회 조건에 AND 혹은 OR로 시작하지 않는 다른 문자로 시작하는 경우 
	        where 엘리먼트가 기본적으로 처리하는 기능에 추가 규칙을 정의하기 위해 trim 엘리먼트를 제공한다.
	        prefix : 처리 후 엘리먼트의 내용이 있으면 가장 앞에 붙여주는 내용을 기술한다.
	        prefixOverrides : 처리 후 엘리먼트 내용 중 가장 앞에 해당 문자들이 있다면 자동으로 지워준다.
	        suffix : 처리 후 엘리먼트 내에 내용이 있으면 가장 뒤에 붙여준다.
	        suffixOverrides : 처리 후 엘리먼트 내용 중 가장 뒤에 해당 문자들이 있다면 자동으로 지워준다.
        -->
       <!--   
        <trim prefix="WHERE" prefixOverrides="AND | OR">
        	<if test="nameValue != null">
               A.MENU_NAME LIKE '%' || #{ nameValue } || '%'
	        </if>
	        <if test="categoryValue != null">
           AND A.CATEGORY_CODE = #{ categoryValue }
        	</if>
        </trim>
        
        -->
         <!-- 해결방법 3 
         WHERE 1=1
        	<if test="nameValue != null">
           AND A.MENU_NAME LIKE '%' || #{ nameValue } || '%'
	        </if>
	        <if test="categoryValue != null">
           AND A.CATEGORY_CODE = #{ categoryValue }
        	</if>
        -->
          <trim prefix="WHERE" prefixOverrides="AND | OR">
        	<if test="nameValue != null">
        	<bind name="namePattern" value="'%' + _parameter.get('nameValue') + '%'"/>
        	
               A.MENU_NAME LIKE #{ namePattern }
	        </if>
	        <if test="categoryValue != null">
           AND A.CATEGORY_CODE = #{ categoryValue }
        	</if>
        </trim> 
        
	</select>
	
	<update id = "modifyMenu" parameterType="hashmap">
	
		<!-- UPDATE 
			TBL_MENU A
		SET A.MENU_NAME = #{name}
			, A.CATEGORY_CODE = #{categoryCode} 
			, A.ORDERABLE_STATUS = #{orderableStatus}
		WHERE A.MENU_CODE = #{code}
		-->
		
		<!-- UPDATE
               TBL_MENU A
    	<if test="name != null and name != ''">
           SET A.MENU_NAME = #{ name }
    	</if>
    	<if test="categoryCode != null and categoryCode gt 0">
             , A.CATEGORY_CODE = #{ categoryCode }
    	</if>
    	<if test="orderableStatus != null and orderableStatus != ''">
             , A.ORDERABLE_STATUS = #{ orderableStatus }
    	</if>
         WHERE A.MENU_CODE = #{ code }
	
	

	-->
	
	<!-- 해결방안 1. 
        	<set> 엘리먼트를 이용한다.
        	set 엘리먼트의 내용이 있을 시 set구문을 자동으로 추가해준다.
        	단, 주의할 점은 마지막 콤마를 제거해주기 때문에 컨벤션을 이렇게 작성하는 경우 사용한다. 
	
	
	     UPDATE
               TBL_MENU A
        <set>
    		<if test="name != null and name != ''">
               A.MENU_NAME = #{ name },
    		</if>
    		<if test="categoryCode != null and categoryCode gt 0">
               A.CATEGORY_CODE = #{ categoryCode },
    		</if>
    		<if test="orderableStatus != null and orderableStatus != ''">
               A.ORDERABLE_STATUS = #{ orderableStatus },
    		</if>
        </set>
         WHERE A.MENU_CODE = #{ code }
	</update>
	-->
	
	     
        <!-- 
        	해결방안 2.
        	<trim> 엘리먼트를 이용하면 코딩컨벤션대로 작성하더라도 앞에 ,를 지울 수 있도록 설정할 수 있다.
         -->
         UPDATE
               TBL_MENU A
        <trim prefix="SET" prefixOverrides=",">
    		<if test="name != null and name != ''">
             , A.MENU_NAME = #{ name }
    		</if>
    		<if test="categoryCode != null and categoryCode gt 0">
             , A.CATEGORY_CODE = #{ categoryCode }
    		</if>
    		<if test="orderableStatus != null and orderableStatus != ''">
             , A.ORDERABLE_STATUS = #{ orderableStatus }
    		</if>
        </trim>
         WHERE A.MENU_CODE = #{ code }
  	</update>
</mapper>